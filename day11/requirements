## 과제 개요

이번 수업에서 JavaScript의 반복문(`while`, `do while`, `for`, `break`, `continue`)과 함수(함수 선언문, 함수 표현식, 화살표 함수, 매개변수 기본값, `...rest`)를 배웠습니다. 또한, 변수 선언(`var`, `let`, `const`), 기본 자료형, 연산자, 조건문(`if`, `else if`, `else`, `switch`)을 이미 학습했으며, 객체는 변수 선언 수준만 이해했습니다. 이번 과제는 **HTML 없이 순수 JavaScript**를 사용하여 브라우저 콘솔에서 실행되는 **별 찍기 프로그램**을 제작하는 것입니다. 기본 과제는 사용자가 입력한 숫자만큼 별(`*`)을 한 줄에 출력하는 함수를 구현하며, 도전 과제는 다양한 함수 정의 방식과 `for...in`, `...rest`를 활용해 추가 패턴을 출력합니다. 프로그램은 간단하고 초보자 친화적으로 설계되었습니다.

## 기본 과제 요구사항

1. **JavaScript 파일 (star.js)**
    - 브라우저 콘솔에서 실행 가능한 JavaScript 파일을 작성하세요.
    - **목표**: 사용자가 `prompt()`로 입력한 숫자(1~10)만큼 별()을 한 줄에 출력.
        - **프로그램 흐름**:
            - 사용자가 숫자를 입력(1~10).
            - 입력한 숫자만큼 별을 한 줄에 출력(예: 입력 5 → `****`).
            - 유효하지 않은 입력(숫자 아님, 1~10 외)은 에러 메시지 출력 후 재입력 요청.
            - 입력이 유효하면 별 출력 후 프로그램 종료.
        - **출력 정보**:
            - 유효하지 않은 입력: `Invalid input! Enter a number between 1 and 10.`
            - 유효한 입력: `[별 출력]` (예: `****`)
    - **기능 요구사항**:
        - **변수 선언**:
            - `var`, `let`, `const`를 각각 최소 1회 사용.
            - 예: `const maxStars = 10;` (최대 별 개수), `let input` (사용자 입력), `var stars` (별 문자열).
        - **반복문**:
            - `while` 또는 `do while`을 사용하여 유효한 입력을 받을 때까지 반복.
            - `for`를 사용하여 입력된 숫자만큼 별() 추가.
            - `continue`로 유효하지 않은 입력 건너뛰기.
            - `break`로 유효한 입력 후 루프 종료.
        - **함수**:
            - **함수 선언문**: 별 출력 함수(예: `function printStars(count)`).
                - 입력된 숫자만큼 별을 문자열로 만들어 콘솔 출력.
            - **매개변수 기본값**: 입력이 0 또는 음수일 경우 기본값 1 사용(예: `count = 1`).
        - **조건문과 연산자**:
            - `if`/`else`로 입력값 검사(숫자인지, 1~10 범위인지).
            - 비교 연산자(`>=`, `<=`, `!isNaN`)와 논리 연산자(`&&`) 사용.
        - **입출력**:
            - `prompt()`로 숫자 입력받음.
            - 콘솔 출력 형식:
                
                ```
                Enter the number of stars (1-10):
                [입력: abc] Invalid input! Enter a number between 1 and 10.
                [입력: 5] *****
                
                ```
                
    - **구현 선택**:
        - 반복문은 `while` 또는 `do while` 선택 가능.
        - 별 문자열 생성은 `for` 루프 또는 문자열 반복(`"*".repeat()`) 사용 가능(단, `repeat`은 간단한 대안으로 허용).
        - 입력 검사 로직은 `if` 또는 `switch`로 자유롭게 설계.
2. **실행 방법**
    - JavaScript 파일을 작성 후, 브라우저 개발자 도구(F12 → Console)에서 코드를 복사/붙여넣기하여 실행하거나, 간단한 HTML 파일에 `<script src="star.js"></script>`를 추가하여 실행:
        - HTML은 제출에 포함하지 않아도 됩니다.
3. **파일 구조**
    - 프로젝트 폴더를 구성:
        
        ```
        star-printer/
        ├── star.js
        
        ```
        

## 도전 과제 (선택)

기본 과제를 완료한 학생들은 다양한 함수 정의와 추가 패턴 출력을 연습하세요.

1. **추가 기능 구현**
    - **다양한 함수 정의**:
        - **함수 표현식**: 역순 별 출력(예: `const printReverseStars = function(count)`).
            - 입력된 숫자만큼 별을 역순으로 출력(예: 입력 3 → `**`, `*`, ).
        - **화살표 함수**: 사각형 패턴 출력(예: `const printSquare = (count) => {...}`).
            - 입력된 숫자만큼 별을 정사각형 형태로 출력(예: 입력 3 → `**\n***\n***`).
    - **for...in 사용**:
        - 패턴 정보를 객체로 저장(예: `{ pattern1: "*****", pattern2: "***" }`).
        - `for...in`으로 객체 속성을 순회하며 패턴 출력.
    - **...rest 사용**:
        - 여러 숫자를 받아 각 숫자에 대해 별 출력(예: `printMultipleStars(...counts)`).
        - 예: `printMultipleStars(2, 3)` → `*`와 `**` 출력.
    - **출력 형식**:
        - 역순 별:
            
            ```
            ***
            **
            *
            
            ```
            
        - 사각형 패턴:
            
            ```
            ***
            ***
            ***
            
            ```
            
        - 여러 숫자:
            
            ```
            Stars for count 2: **
            Stars for count 3: ***
            
            ```
            
    - **구현 선택**:
        - 역순 별은 `for` 또는 `while`로 구현 가능.
        - 사각형 패턴은 중첩 루프 또는 문자열 반복 자유.
        - `...rest`로 여러 숫자 처리 시 입력 방식(하드코딩 또는 추가 `prompt()`) 자유.
2. **도전 과제 파일 구조**
    - 동일한 `star.js`에 추가 기능을 포함.
    - 제출 폴더명에 "challenge"를 추가: `이름_학번_JavaScript과제_challenge.zip`

## 주의사항

- **JavaScript 문법**: 변수(`var`, `let`, `const`), 기본 자료형, 연산자, 조건문(`if`, `else if`, `else`, `switch`), 반복문(`while`, `do while`, `for`, `for...in`, `break`, `continue`), 함수(선언문, 표현식, 화살표, 기본값, `...rest`)만 사용하세요. 객체는 도전 과제에서 변수 선언 수준으로 제한. DOM 조작, HTML, Node.js는 사용하지 마세요.
- **실행 환경**: 브라우저 콘솔(F12)에서 실행하거나, 간단한 HTML 파일로 테스트하세요.
- **코드 가독성**: 코드는 들여쓰기를 통해 가독성을 높이고, 주석(`//`)으로 주요 코드(반복문, 함수, 조건문)를 설명하세요.
- **테스트**: 브라우저 콘솔에서 `star.js`를 실행하여 입력, 유효성 검사, 별 출력이 정확히 작동하는지 확인(예: 입력 5 → `****`, 입력 abc → `Invalid input!`).
- **입력 처리**: `prompt()`는 문자열을 반환하므로 `Number()`로 변환. 입력은 1~10으로 제한, 유효하지 않은 입력은 에러 메시지 출력.