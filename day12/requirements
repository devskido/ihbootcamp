## 과제 개요

이번 과제는 **HTML 없이 순수 JavaScript**를 사용하여 브라우저 콘솔에서 실행되는 **영화 컬렉션 관리 프로그램**을 제작하는 것입니다. 하드코딩된 영화 데이터를 객체와 배열로 관리하며, 영화 목록을 출력합니다. 기본 과제는 영화 정보를 배열에 저장하고 출력하며, 도전 과제는 영화 검색과 통계 계산을 추가합니다. `prompt()`를 사용하지 않아 간단하며, 객체와 배열 연습에 초점을 맞췄습니다.

## 기본 과제 요구사항

1. **JavaScript 파일 (movies.js)**
    - 브라우저 콘솔에서 실행 가능한 JavaScript 파일을 작성하세요.
    - **목표**: 하드코딩된 최소 3개의 영화 정보를 객체로 생성하고 배열에 저장한 후, 영화 목록을 출력.
        - **영화 객체**: `{ title: string, director: string, year: number, genre: string }` 형태.
        - **프로그램 흐름**:
            - 최소 3개의 영화 객체를 하드코딩으로 배열에 추가(예: `[{ title: "Movie1", director: "Director1", year: 2000, genre: "Action" }, ...]`).
            - 배열에 저장된 모든 영화 정보를 콘솔에 출력.
        - **출력 정보**:
            
            ```
            Movie Collection:
            1. Title: [title], Director: [director], Year: [year], Genre: [genre]
            2. Title: [title], Director: [director], Year: [year], Genre: [genre]
            ...
            Total Movies: [총 영화 수]
            
            ```
            
        - 예:
            
            ```
            Movie Collection:
            1. Title: The Matrix, Director: Wachowskis, Year: 1999, Genre: Sci-Fi
            2. Title: Inception, Director: Nolan, Year: 2010, Genre: Sci-Fi
            3. Title: Parasite, Director: Bong, Year: 2019, Genre: Drama
            Total Movies: 3
            
            ```
            
    - **기능 요구사항**:
        - **변수와 배열**:
            - `let movies = [];`로 영화 객체를 저장하는 배열 선언.
            - `var`, `let`, `const`를 각각 최소 1회 사용(예: `const defaultGenre = "Unknown";`, `let movie`, `var count`).
        - **객체**:
            - 각 영화 객체는 `title`(문자열), `director`(문자열), `year`(숫자), `genre`(문자열) 속성 포함.
            - 최소 3개 영화 객체를 하드코딩으로 생성.
        - **반복문**:
            - `for`를 사용하여 영화 목록 출력.
        - **함수**:
            - **함수 선언문**: 영화 목록 출력 함수(예: `function printMovies(movies)`).
                - 배열을 받아 각 영화 정보를 번호와 함께 출력.
            - **매개변수 기본값**: 빈 문자열 속성에 기본값 설정(예: `director = "Unknown"`).
        - **조건문과 연산자**:
            - 빈 속성 확인 후 기본값 설정(예: `if (!movie.title) movie.title = "Unknown";`).
    - **구현 선택**:
        - 영화 목록 출력은 `for` 또는 `while` 루프 선택 가능.
        - 객체 속성 설정은 하드코딩 시 직접 입력 또는 함수로 처리 가능.
2. **실행 방법**
    - JavaScript 파일을 작성 후, 브라우저 개발자 도구(F12 → Console)에서 코드를 복사/붙여넣기하여 실행하거나, 간단한 HTML 파일에 `<script src="movies.js"></script>`를 추가하여 실행:
        
        ```html
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Movie Collection</title>
        </head>
        <body>
          <script src="movies.js"></script>
        </body>
        </html>
        
        ```
        
        - HTML은 제출에 포함하지 않아도 됩니다.
3. **파일 구조**
    - 프로젝트 폴더를 구성:
        
        ```
        movie-collection/
        ├── movies.js
        
        ```
        

## 도전 과제 (선택)

기본 과제를 완료한 학생들은 영화 검색과 통계 계산 기능을 추가하세요.

1. **추가 기능 구현**
    - **영화 검색**:
        - 특정 장르(예: "Sci-Fi")의 영화만 출력.
        - `for...in`을 사용하여 영화 객체의 속성을 순회하며 장르 확인.
        - 출력 예시:
            
            ```
            Sci-Fi Movies:
            1. Title: The Matrix, Director: Wachowskis, Year: 1999, Genre: Sci-Fi
            2. Title: Inception, Director: Nolan, Year: 2010, Genre: Sci-Fi
            
            ```
            
            - 결과 없으면: `No movies found for genre: [genre].`
    - **통계 계산**:
        - **함수 표현식**: 평균 출판년도 계산(예: `const calculateAverageYear = function(movies)`).
        - **화살표 함수**: 가장 최신 영화 찾기(예: `const findNewestMovie = (movies) => {...}`).
        - `...rest`를 사용하여 여러 영화 객체를 한 번에 추가(예: `addMovies(...newMovies)`).
        - 출력 예시:
            
            ```
            Statistics:
            Average Year: [평균]
            Newest Movie: [title] ([year])
            
            ```
            
    - **구현 선택**:
        - 검색은 `for` 또는 `for...in` 선택 가능.
        - 통계 계산은 별도 함수 또는 기존 함수 확장 가능.
        - `...rest`로 영화 추가는 하드코딩으로 처리 가능.
2. **도전 과제 파일 구조**
    - 동일한 `movies.js`에 추가 기능을 포함.
    - 제출 폴더명에 "challenge"를 추가: `이름_학번_JavaScript과제_challenge.zip`

## 주의사항

- **JavaScript 문법**: 변수(`var`, `let`, `const`), 기본 자료형, 연산자, 조건문(`if`, `else if`, `else`, `switch`), 반복문(`while`, `do while`, `for`, `for...in`, `break`, `continue`), 함수(선언문, 표현식, 화살표, 기본값, `...rest`), 객체, 배열을 사용하세요. `prompt()`, DOM 조작, HTML, Node.js는 사용하지 마세요.